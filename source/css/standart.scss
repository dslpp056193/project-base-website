// STANDARY STYLES (RESET)
*{margin: 0;padding: 0;outline: 0;appearance: none !important;font-family: $font, sans-serif;}

body{
    width: 100%;
    height: 100%;
	color: #333333;
}

html {
	height: 100%;
	font-size: $font_size + px;

	body {
		height: 100%;
		min-height: 100%;
		min-width:320px;
		position: relative;
	}
}

@font-face {
  font-family: 'Tahoma';
  font-style: normal;
  font-weight: 400;
  src: local('Tahoma'), url(fonts/font?kit=SR1FNt_uUWzf7Ux9q0xdEg) format('woff');
}


button{cursor: pointer;appearance:none !important;border: none;}
input[type="submit"]{cursor: pointer;appearance:none !important;}
a{text-decoration: none;color: inherit;backface-visibility: hidden;}
ul{list-style: none;}
.bold{font-weight: $font_bold;}
.bolder{font-weight: $font_black;}
.light{font-weight: $font_light;}
::selection{
    color: #fff;
    background-color: $color-primary;
}

/* FLEXBOX */
.flex{
	display: flex !important;
	flex-direction: row;
}

.flex,
.row{
	&.flex-wrap{flex-wrap:wrap;}
	
	&.row-r{flex-direction: row-reverse;}
	&.col{flex-direction: column;}
	&.col-r{flex-direction: column-reverse;}

	&.justify-start{justify-content: flex-start;}
	&.justify-end{justify-content: flex-end;}
	&.justify-center{justify-content: center;}
	&.justify-between{justify-content: space-between;}
	&.justify-around{justify-content: space-around;}

	&.align-start{align-items: flex-start;}
	&.align-end{align-items: flex-end;}
	&.align-center{align-items: center;}
	&.align-stretch{align-items: stretch;}
	&.align-baseline{align-items: baseline;}
}

.flex-shrink{
	flex-shrink: 0;
}

.flex-grow{
	flex-grow: 1;
}

/* END FLEXBOX */

/* MEDIA STYLES */

@mixin screen ($size){
	@if ( $size == xs ){
		@media (max-width: map-get($breakpoints-max, $size)){
			@content;
		}
	} @else {
		@media (min-width: map-get($breakpoints, $size)) and (max-width: map-get($breakpoints-max, $size)){
			@content;
		}
	}
}

@mixin screen-to ($size){
	@media (max-width: map-get($breakpoints-max, $size)){
		@content;
	}
}

@mixin screen-from ($size){
	@media (min-width: map-get($breakpoints, $size)){
		@content;
	}
}

@mixin screen-laptop(){
	@media(max-height: 765px){
		@content;
	}
}

@mixin screen-laptop-big(){
	@media(max-height: 900px){
		@content;
	}
}

@mixin screen-retina(){
	@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi){
		@content;
	}
}

/* END MEDIA STYLES */


/* COLUMNS */
.body{
    width: 1140px;
	margin: 0 auto;
}

$padding: 30;

.row{
	display: flex;
	flex-wrap: wrap;
	margin-left: rem(-$padding/2);
	margin-right: rem(-$padding/2);

	& > *,
	&.flex:after{
		margin-left: rem($padding/2);
		margin-right: rem($padding/2);
	}
}

.column-auto{ width: auto !important;}

[class*="column-"]{
	display: block;
}

$columns: 12;
@for $cols from 1 through $columns {
 	.column-#{$cols}{
		width: calc( #{(100% / 12) * $cols} - #{ rem(($padding * (12/$cols)) / (12/$cols))  } );
	}
}

@for $cols from 0 through $columns {
 	.space-right-#{$cols} { margin-right: (100% / 12) * $cols !important;}
}

@for $cols from 0 through $columns {
 	.space-left-#{$cols} { margin-left: (100% / 12) * $cols !important;}
}

@each $size, $value in $breakpoints {
	@include screen($size) {
		.column-#{$size}-auto{ width: auto !important;}

		@for $cols from 1 through $columns {
			.column-#{$size}-#{$cols}{
				width: calc( #{(100% / 12) * $cols} - #{ rem(($padding * (12/$cols)) / (12/$cols))  } );
			}

			.space-right-#{$size}-#{$cols} { margin-right: (100% / 12) * $cols !important;}
			.space-left-#{$size}-#{$cols} { margin-left: (100% / 12) * $cols !important;}
		}

		// .BODY SIZES

		.body{
			width: map-get($body, $size);
		}
	}

	@include screen-to($size) {
		.column-#{$size}-auto{ width: auto !important;}

		@for $cols from 1 through $columns {
		 	.column-to-#{$size}-#{$cols}{
				width: calc( #{(100% / 12) * $cols} - #{ rem(($padding * (12/$cols)) / (12/$cols))  } );	
			 }

			.space-right-to-#{$size}-#{$cols} { margin-right: (100% / 12) * $cols !important;}
			.space-left-to-#{$size}-#{$cols} { margin-left: (100% / 12) * $cols !important;}
		}
	}

	@include screen-from($size) {
		.column-#{$size}-auto{ width: auto !important;}

		@for $cols from 1 through $columns {
		 	.column-from-#{$size}-#{$cols}{
				width: calc( #{(100% / 12) * $cols} - #{ rem(($padding * (12/$cols)) / (12/$cols))  } );
			}

			.space-right-from-#{$size}-#{$cols} { margin-right: (100% / 12) * $cols !important;}
			.space-left-from-#{$size}-#{$cols} { margin-left: (100% / 12) * $cols !important;}
		}
	}
}

*[class*="column-"].no-margin, .no-margin [class*="column-"]{padding: 0 !important;}

/* END COLUMNS */

// HIDE / SHOW

.hide{display:none;}
.show{display:block;}

@each $size, $value in $breakpoints {
	@include screen($size) {
		.show-#{$size} {display: block !important;}
		.hide-#{$size} {display: none !important;}
	}

	@include screen-to($size) {
		.show-to-#{$size} {display: block !important;}
		.hide-to-#{$size} {display: none !important;}
	}

	@include screen-from($size) {
		.show-from-#{$size} {display: block !important;}
		.hide-from-#{$size} {display: none !important;}
	}
}

// CREATE MARGIN SHORTCUTS
@for $size from 1 through 5 {
	.margin-t-#{$size} { margin-top: $size * 10 / $font_size + rem;}

	.margin-r-#{$size} { margin-right: $size * 10 / $font_size + rem;}

	.margin-b-#{$size} { margin-bottom: $size * 10 / $font_size + rem;}

	.margin-l-#{$size} { margin-left: $size * 10 / $font_size + rem;}
}

// CREATE PADDING SHORTCUTS
@for $size from 1 through 5 {
	.padding-t-#{$size} { padding-top: $size * 10 / $font_size + rem;}

	.padding-r-#{$size} { padding-right: $size * 10 / $font_size + rem;}

	.padding-b-#{$size} { padding-bottom: $size * 10 / $font_size + rem;}

	.padding-l-#{$size} { padding-left: $size * 10 / $font_size + rem;}
}

// CREATE FONT size SHORTCUTS
@for $size from 8 through 60 {
	@if $size % 2 == 0 {
		.fz#{$size}{ font-size: $size / $font_size + rem !important;};
	}
}

// CREATE FONT WEIGHT SHORTCUTS
@for $size from 1 through 9 {
	.fw#{$size}{ font-size: $size * 100 !important;};
}

// CREATE LINE HEIGHT
@for $size from 8 through 60 {
	@if $size % 2 == 0 {
		.lh#{$size}{ line-height: $size / $font_size + rem !important;};
	}
}

// PLACEHOLDER

@mixin placeholder(){
	&::-webkit-input-placeholder { /* WebKit, Blink, Edge */
	    @content;
	}
	&:-moz-placeholder { /* Mozilla Firefox 4 to 18 */
	   @content;
	}
	&::-moz-placeholder { /* Mozilla Firefox 19+ */
	   @content;
	}
	&:-ms-input-placeholder { /* Internet Explorer 10-11 */
	   @content;
	}
}

@mixin retina($image, $width, $height) {
	@media  (min--moz-device-pixel-ratio: 1.3),
			(-o-min-device-pixel-ratio: 2.6/2),
			(-webkit-min-device-pixel-ratio: 1.3),
			(min-device-pixel-ratio: 1.3),
			(min-resolution: 1.3dppx) {
		/* on retina, use image that's scaled by 2 */
		background-image: url($image);
		background-size: $width $height;
	}
}